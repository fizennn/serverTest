import { Injectable, BadRequestException, NotFoundException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model, Types } from 'mongoose';
import { Voucher, VoucherDocument } from '../schemas/voucher.schema';
import { NotificationService } from '@/notifications/notifications.service';
import { User } from '@/users/schemas/user.schema';

export interface CreateRefundVoucherDto {
  userId: string;
  refundAmount: number;
  orderId?: string;
  returnOrderId?: string;
  reason?: string;
  voucherType?: 'item' | 'ship';
  condition?: number;
  validDays?: number;
  description?: string;
}

export interface RefundVoucherResult {
  voucher: VoucherDocument;
  message: string;
  refundAmount: number;
  voucherValue: number;
}

@Injectable()
export class VoucherRefundService {
  constructor(
    @InjectModel(Voucher.name) private voucherModel: Model<VoucherDocument>,
    @InjectModel(User.name) private userModel: Model<User>,
    private notificationService: NotificationService,
  ) {}

  /**
   * T·∫°o voucher cho vi·ªác ho√†n ti·ªÅn
   * @param createRefundVoucherDto Th√¥ng tin t·∫°o voucher refund
   * @returns K·∫øt qu·∫£ t·∫°o voucher
   */
  async createRefundVoucher(
    createRefundVoucherDto: CreateRefundVoucherDto,
  ): Promise<RefundVoucherResult> {
    console.log('=== B·∫ÆT ƒê·∫¶U T·∫†O VOUCHER REFUND ===');
    console.log('Input data:', JSON.stringify(createRefundVoucherDto, null, 2));
    
    const {
      userId,
      refundAmount,
      orderId,
      returnOrderId,
      reason = 'Ho√†n ti·ªÅn t·ª´ y√™u c·∫ßu tr·∫£ h√†ng',
      voucherType = 'item',
      condition,
      validDays = 30,
      description,
    } = createRefundVoucherDto;

    // Validate input
    console.log('=== B∆Ø·ªöC 1: VALIDATE INPUT ===');
    if (!userId || !Types.ObjectId.isValid(userId)) {
      console.log('‚ùå L·ªói: ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá:', userId);
      throw new BadRequestException('ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá');
    }
    console.log('‚úÖ User ID h·ª£p l·ªá:', userId);

    if (!refundAmount || refundAmount <= 0) {
      console.log('‚ùå L·ªói: S·ªë ti·ªÅn ho√†n kh√¥ng h·ª£p l·ªá:', refundAmount);
      throw new BadRequestException('S·ªë ti·ªÅn ho√†n ph·∫£i l·ªõn h∆°n 0');
    }
    console.log('‚úÖ S·ªë ti·ªÅn ho√†n h·ª£p l·ªá:', refundAmount);

    // Ki·ªÉm tra user t·ªìn t·∫°i
    console.log('=== B∆Ø·ªöC 2: KI·ªÇM TRA USER ===');
    const user = await this.userModel.findById(userId);
    if (!user) {
      console.log('‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y user v·ªõi ID:', userId);
      throw new NotFoundException('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
    }
    console.log('‚úÖ T√¨m th·∫•y user:', user.name || user.email);

    // T√≠nh to√°n gi√° tr·ªã voucher
    console.log('=== B∆Ø·ªöC 3: T√çNH TO√ÅN VOUCHER ===');
    const voucherValue = this.calculateVoucherValue(refundAmount);
    console.log('üí∞ Gi√° tr·ªã voucher ƒë∆∞·ª£c t√≠nh:', voucherValue, 'VND');
    
    // T√≠nh to√°n ƒëi·ªÅu ki·ªán s·ª≠ d·ª•ng voucher
    const voucherCondition = condition || this.calculateVoucherCondition(voucherValue);
    console.log('üìã ƒêi·ªÅu ki·ªán s·ª≠ d·ª•ng voucher:', voucherCondition, 'VND');
    
    // T√≠nh to√°n th·ªùi gian hi·ªáu l·ª±c
    const now = new Date();
    const startDate = new Date(now);
    const endDate = new Date(now.getTime() + validDays * 24 * 60 * 60 * 1000);
    console.log('üìÖ Th·ªùi gian hi·ªáu l·ª±c:', {
      start: startDate.toISOString(),
      end: endDate.toISOString(),
      validDays: validDays
    });

    // T·∫°o voucher data
    console.log('=== B∆Ø·ªöC 4: T·∫†O VOUCHER DATA ===');
    const voucherData = {
      type: voucherType,
      disCount: 100, // Gi·∫£m 100% t∆∞∆°ng ƒë∆∞∆°ng v·ªõi gi√° tr·ªã voucher
      condition: voucherCondition,
      limit: voucherValue, // Gi·ªõi h·∫°n gi·∫£m gi√° b·∫±ng gi√° tr·ªã voucher
      stock: 0, // Voucher ho√†n tr·∫£ kh√¥ng c·∫ßn stock v√¨ ch·ªâ d√†nh ri√™ng cho 1 user
      start: startDate,
      end: endDate,
      userId: [new Types.ObjectId(userId)],
      isDisable: false,
    };
    console.log('üìù Voucher data:', JSON.stringify(voucherData, null, 2));

    // T·∫°o voucher
    console.log('=== B∆Ø·ªöC 5: L∆ØU VOUCHER V√ÄO DATABASE ===');
    const voucher = new this.voucherModel(voucherData);
    console.log('üîÑ ƒêang l∆∞u voucher...');
    const createdVoucher = await voucher.save();
    console.log('‚úÖ Voucher ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');
    console.log('üÜî Voucher ID:', createdVoucher._id.toString());
    console.log('üìä Voucher details:', {
      type: createdVoucher.type,
      disCount: createdVoucher.disCount,
      condition: createdVoucher.condition,
      limit: createdVoucher.limit,
      stock: createdVoucher.stock,
      userId: createdVoucher.userId
    });

    // T·∫°o message th√¥ng b√°o
    console.log('=== B∆Ø·ªöC 6: T·∫†O MESSAGE TH√îNG B√ÅO ===');
    const message = this.createNotificationMessage(
      refundAmount,
      voucherValue,
      reason,
      validDays,
      orderId,
      returnOrderId,
    );
    console.log('üì® Message th√¥ng b√°o:', message);

    // G·ª≠i th√¥ng b√°o cho user
    console.log('=== B∆Ø·ªöC 7: G·ª¨I TH√îNG B√ÅO CHO USER ===');
    try {
      await this.sendRefundNotification(
        userId,
        message,
        createdVoucher._id.toString(),
        refundAmount,
        voucherValue,
        orderId,
        returnOrderId,
      );
      console.log('‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o cho user th√†nh c√¥ng');
    } catch (error) {
      console.log('‚ùå L·ªói g·ª≠i th√¥ng b√°o cho user:', error.message);
    }

    // G·ª≠i th√¥ng b√°o cho admin
    console.log('=== B∆Ø·ªöC 8: G·ª¨I TH√îNG B√ÅO CHO ADMIN ===');
    try {
      await this.sendAdminNotification(
        userId,
        refundAmount,
        voucherValue,
        orderId,
        returnOrderId,
        reason,
      );
      console.log('‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o cho admin th√†nh c√¥ng');
    } catch (error) {
      console.log('‚ùå L·ªói g·ª≠i th√¥ng b√°o cho admin:', error.message);
    }

    console.log('=== B∆Ø·ªöC 9: HO√ÄN TH√ÄNH ===');
    const result = {
      voucher: createdVoucher,
      message: 'Voucher ho√†n ti·ªÅn ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
      refundAmount,
      voucherValue,
    };
    console.log('üéâ K·∫øt qu·∫£ cu·ªëi c√πng:', JSON.stringify(result, null, 2));
    console.log('=== K·∫æT TH√öC T·∫†O VOUCHER REFUND ===');
    
    return result;
  }

  /**
   * T√≠nh to√°n gi√° tr·ªã voucher d·ª±a tr√™n s·ªë ti·ªÅn ho√†n
   * C√≥ th·ªÉ tƒÉng gi√° tr·ªã ƒë·ªÉ khuy·∫øn kh√≠ch mua h√†ng
   */
  private calculateVoucherValue(refundAmount: number): number {
    // Logic: TƒÉng 10% gi√° tr·ªã ƒë·ªÉ khuy·∫øn kh√≠ch mua h√†ng
    const bonusPercentage = 0.1; // 10%
    const result = Math.round(refundAmount * (1 + bonusPercentage));
    console.log(`üßÆ T√≠nh to√°n voucher: ${refundAmount} √ó 1.1 = ${result} VND`);
    return result;
  }

  /**
   * T√≠nh to√°n ƒëi·ªÅu ki·ªán s·ª≠ d·ª•ng voucher
   * ƒêi·ªÅu ki·ªán th∆∞·ªùng b·∫±ng 50-80% gi√° tr·ªã voucher
   */
  private calculateVoucherCondition(voucherValue: number): number {
    const conditionPercentage = 0.6; // 60% gi√° tr·ªã voucher
    const result = Math.round(voucherValue * conditionPercentage);
    console.log(`üìã T√≠nh to√°n ƒëi·ªÅu ki·ªán: ${voucherValue} √ó 0.6 = ${result} VND`);
    return result;
  }

  /**
   * T·∫°o message th√¥ng b√°o cho user
   */
  private createNotificationMessage(
    refundAmount: number,
    voucherValue: number,
    reason: string,
    validDays: number,
    orderId?: string,
    returnOrderId?: string,
  ): string {
    // X·ª≠ l√Ω ID ƒë·ªÉ hi·ªÉn th·ªã ng·∫Øn g·ªçn
    const shortOrderId = orderId ? this.getShortId(orderId) : '';
    const shortReturnId = returnOrderId ? this.getShortId(returnOrderId) : '';
    
    const orderInfo = shortOrderId ? ` cho ƒë∆°n h√†ng #${shortOrderId}` : '';
    const returnInfo = shortReturnId ? ` (Y√™u c·∫ßu tr·∫£ h√†ng: #${shortReturnId})` : '';
    
    return `B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c voucher ho√†n ti·ªÅn${orderInfo}${returnInfo}. 
    
L√Ω do: ${reason}
S·ªë ti·ªÅn ho√†n: ${this.formatCurrency(refundAmount)}
Gi√° tr·ªã voucher: ${this.formatCurrency(voucherValue)}
Th·ªùi h·∫°n s·ª≠ d·ª•ng: ${validDays} ng√†y

Voucher c√≥ th·ªÉ s·ª≠ d·ª•ng cho ƒë∆°n h√†ng ti·∫øp theo v·ªõi ƒëi·ªÅu ki·ªán t·ªëi thi·ªÉu ${this.formatCurrency(voucherValue * 0.6)}.`;
  }

  /**
   * G·ª≠i th√¥ng b√°o cho user
   */
  private async sendRefundNotification(
    userId: string,
    message: string,
    voucherId: string,
    refundAmount: number,
    voucherValue: number,
    orderId?: string,
    returnOrderId?: string,
  ): Promise<void> {
    try {
      await this.notificationService.sendAndSaveNotification(
        userId,
        null, // pushToken s·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ user trong service
        'Voucher ho√†n ti·ªÅn ƒë√£ ƒë∆∞·ª£c t·∫°o',
        message,
        'refund',
        {
          type: 'refund-voucher',
          voucherId,
          refundAmount,
          voucherValue,
          orderId,
          returnOrderId,
          action: 'voucher-created',
        },
      );
    } catch (error) {
      console.error('L·ªói g·ª≠i th√¥ng b√°o voucher refund:', error);
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o cho admin
   */
  private async sendAdminNotification(
    userId: string,
    refundAmount: number,
    voucherValue: number,
    orderId?: string,
    returnOrderId?: string,
    reason?: string,
  ): Promise<void> {
    try {
      // X·ª≠ l√Ω ID ƒë·ªÉ hi·ªÉn th·ªã ng·∫Øn g·ªçn
      const shortUserId = this.getShortId(userId);
      const shortOrderId = orderId ? this.getShortId(orderId) : '';
      const shortReturnId = returnOrderId ? this.getShortId(returnOrderId) : '';
      
      const adminMessage = `ƒê√£ t·∫°o voucher ho√†n ti·ªÅn cho user #${shortUserId}
S·ªë ti·ªÅn ho√†n: ${this.formatCurrency(refundAmount)}
Gi√° tr·ªã voucher: ${this.formatCurrency(voucherValue)}
L√Ω do: ${reason || 'Kh√¥ng c√≥'}
${shortOrderId ? `ƒê∆°n h√†ng: #${shortOrderId}` : ''}
${shortReturnId ? `Y√™u c·∫ßu tr·∫£ h√†ng: #${shortReturnId}` : ''}`;

      await this.notificationService.sendNotificationToAdmins(
        'Voucher ho√†n ti·ªÅn ƒë√£ ƒë∆∞·ª£c t·∫°o',
        adminMessage,
        'refund',
        {
          type: 'refund-voucher-admin',
          userId,
          refundAmount,
          voucherValue,
          orderId,
          returnOrderId,
          reason,
          action: 'voucher-created',
        },
      );
    } catch (error) {
      console.error('L·ªói g·ª≠i th√¥ng b√°o admin voucher refund:', error);
    }
  }

  /**
   * Format ti·ªÅn t·ªá
   */
  private formatCurrency(amount: number): string {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND',
    }).format(amount);
  }

  /**
   * L·∫•y ID ng·∫Øn g·ªçn t·ª´ ObjectId ho·∫∑c string
   */
  private getShortId(id: string): string {
    if (!id) return '';
    
    // N·∫øu l√† ObjectId, l·∫•y 8 k√Ω t·ª± cu·ªëi
    if (id.length === 24) {
      return id.slice(-8);
    }
    
    // N·∫øu l√† string ng·∫Øn, tr·∫£ v·ªÅ nguy√™n b·∫£n
    if (id.length <= 8) {
      return id;
    }
    
    // N·∫øu l√† string d√†i, l·∫•y 8 k√Ω t·ª± cu·ªëi
    return id.slice(-8);
  }

  /**
   * L·∫•y th√¥ng tin voucher refund c·ªßa user
   */
  async getUserRefundVouchers(userId: string): Promise<VoucherDocument[]> {
    if (!Types.ObjectId.isValid(userId)) {
      throw new BadRequestException('ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá');
    }

    const now = new Date();
    return this.voucherModel.find({
      userId: new Types.ObjectId(userId),
      isDisable: false,
      start: { $lte: now },
      end: { $gte: now },
      // B·ªè filter stock v√¨ stock ch·ªâ gi·∫£m khi user nh·∫≠n voucher, kh√¥ng ph·∫£i khi s·ª≠ d·ª•ng
      // stock: { $gt: 0 },
    }).sort({ createdAt: -1 });
  }

  /**
   * Ki·ªÉm tra voucher c√≥ h·ª£p l·ªá cho user kh√¥ng
   */
  async validateVoucherForUser(
    voucherId: string,
    userId: string,
    orderAmount: number,
  ): Promise<{ isValid: boolean; message: string; voucher?: VoucherDocument }> {
    if (!Types.ObjectId.isValid(voucherId) || !Types.ObjectId.isValid(userId)) {
      return { isValid: false, message: 'ID kh√¥ng h·ª£p l·ªá' };
    }

    const voucher = await this.voucherModel.findById(voucherId);
    if (!voucher) {
      return { isValid: false, message: 'Voucher kh√¥ng t·ªìn t·∫°i' };
    }

    // Ki·ªÉm tra user c√≥ ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng voucher kh√¥ng
    const userCanUse = voucher.userId.some(
      (id) => id.toString() === userId,
    );
    if (!userCanUse) {
      return { isValid: false, message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng voucher n√†y' };
    }

    // Ki·ªÉm tra voucher c√≥ b·ªã v√¥ hi·ªáu h√≥a kh√¥ng
    if (voucher.isDisable) {
      return { isValid: false, message: 'Voucher ƒë√£ b·ªã v√¥ hi·ªáu h√≥a' };
    }

    // Ki·ªÉm tra th·ªùi gian hi·ªáu l·ª±c
    const now = new Date();
    if (now < voucher.start || now > voucher.end) {
      return { isValid: false, message: 'Voucher kh√¥ng trong th·ªùi gian hi·ªáu l·ª±c' };
    }

    // B·ªè ki·ªÉm tra stock v√¨ stock ch·ªâ gi·∫£m khi user nh·∫≠n voucher, kh√¥ng ph·∫£i khi s·ª≠ d·ª•ng
    // if (voucher.stock <= 0) {
    //   return { isValid: false, message: 'Voucher ƒë√£ h·∫øt' };
    // }

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán s·ª≠ d·ª•ng
    if (orderAmount < voucher.condition) {
      return {
        isValid: false,
        message: `ƒê∆°n h√†ng ph·∫£i c√≥ gi√° tr·ªã t·ªëi thi·ªÉu ${this.formatCurrency(voucher.condition)}`,
      };
    }

    return { isValid: true, message: 'Voucher h·ª£p l·ªá', voucher };
  }

  /**
   * S·ª≠ d·ª•ng voucher (kh√¥ng c·∫ßn gi·∫£m stock v√¨ voucher ho√†n tr·∫£)
   */
  async useVoucher(voucherId: string): Promise<void> {
    const voucher = await this.voucherModel.findById(voucherId);
    if (!voucher) {
      throw new NotFoundException('Voucher kh√¥ng t·ªìn t·∫°i');
    }

    // Voucher ho√†n tr·∫£ kh√¥ng c·∫ßn gi·∫£m stock v√¨ ch·ªâ d√†nh ri√™ng cho 1 user
    // voucher.stock -= 1;
    // await voucher.save();
    
    console.log('Voucher ho√†n tr·∫£ ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng:', voucherId);
  }
}
